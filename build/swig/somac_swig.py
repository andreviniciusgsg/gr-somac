# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_somac_swig', [dirname(__file__)])
        except ImportError:
            import _somac_swig
            return _somac_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_somac_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _somac_swig = swig_import_helper()
    del swig_import_helper
else:
    import _somac_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _somac_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _somac_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _somac_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _somac_swig.high_res_timer_epoch()
class sensor(object):
    """Proxy of C++ gr::somac::sensor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(mac, is_coord, debug):
        """make(std::vector< uint8_t,std::allocator< uint8_t > > mac, bool is_coord, bool debug) -> sensor_sptr"""
        return _somac_swig.sensor_make(mac, is_coord, debug)

    make = staticmethod(make)
    __swig_destroy__ = _somac_swig.delete_sensor
    __del__ = lambda self: None
sensor_swigregister = _somac_swig.sensor_swigregister
sensor_swigregister(sensor)

def sensor_make(mac, is_coord, debug):
    """sensor_make(std::vector< uint8_t,std::allocator< uint8_t > > mac, bool is_coord, bool debug) -> sensor_sptr"""
    return _somac_swig.sensor_make(mac, is_coord, debug)

class sensor_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::somac::sensor)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::somac::sensor)> self) -> sensor_sptr
        __init__(boost::shared_ptr<(gr::somac::sensor)> self, sensor p) -> sensor_sptr
        """
        this = _somac_swig.new_sensor_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(sensor_sptr self) -> sensor"""
        return _somac_swig.sensor_sptr___deref__(self)

    __swig_destroy__ = _somac_swig.delete_sensor_sptr
    __del__ = lambda self: None

    def make(self, mac, is_coord, debug):
        """make(sensor_sptr self, std::vector< uint8_t,std::allocator< uint8_t > > mac, bool is_coord, bool debug) -> sensor_sptr"""
        return _somac_swig.sensor_sptr_make(self, mac, is_coord, debug)


    def history(self):
        """history(sensor_sptr self) -> unsigned int"""
        return _somac_swig.sensor_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sensor_sptr self, int which, int delay)
        declare_sample_delay(sensor_sptr self, unsigned int delay)
        """
        return _somac_swig.sensor_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(sensor_sptr self, int which) -> unsigned int"""
        return _somac_swig.sensor_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(sensor_sptr self) -> int"""
        return _somac_swig.sensor_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(sensor_sptr self) -> double"""
        return _somac_swig.sensor_sptr_relative_rate(self)


    def start(self):
        """start(sensor_sptr self) -> bool"""
        return _somac_swig.sensor_sptr_start(self)


    def stop(self):
        """stop(sensor_sptr self) -> bool"""
        return _somac_swig.sensor_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(sensor_sptr self, unsigned int which_input) -> uint64_t"""
        return _somac_swig.sensor_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(sensor_sptr self, unsigned int which_output) -> uint64_t"""
        return _somac_swig.sensor_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(sensor_sptr self) -> int"""
        return _somac_swig.sensor_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(sensor_sptr self, int m)"""
        return _somac_swig.sensor_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sensor_sptr self)"""
        return _somac_swig.sensor_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sensor_sptr self) -> bool"""
        return _somac_swig.sensor_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(sensor_sptr self, int m)"""
        return _somac_swig.sensor_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(sensor_sptr self) -> int"""
        return _somac_swig.sensor_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(sensor_sptr self, int i) -> long"""
        return _somac_swig.sensor_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sensor_sptr self, long max_output_buffer)
        set_max_output_buffer(sensor_sptr self, int port, long max_output_buffer)
        """
        return _somac_swig.sensor_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(sensor_sptr self, int i) -> long"""
        return _somac_swig.sensor_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sensor_sptr self, long min_output_buffer)
        set_min_output_buffer(sensor_sptr self, int port, long min_output_buffer)
        """
        return _somac_swig.sensor_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(sensor_sptr self) -> float"""
        return _somac_swig.sensor_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sensor_sptr self) -> float"""
        return _somac_swig.sensor_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sensor_sptr self) -> float"""
        return _somac_swig.sensor_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(sensor_sptr self) -> float"""
        return _somac_swig.sensor_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sensor_sptr self) -> float"""
        return _somac_swig.sensor_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(sensor_sptr self) -> float"""
        return _somac_swig.sensor_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sensor_sptr self, int which) -> float
        pc_input_buffers_full(sensor_sptr self) -> pmt_vector_float
        """
        return _somac_swig.sensor_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sensor_sptr self, int which) -> float
        pc_input_buffers_full_avg(sensor_sptr self) -> pmt_vector_float
        """
        return _somac_swig.sensor_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sensor_sptr self, int which) -> float
        pc_input_buffers_full_var(sensor_sptr self) -> pmt_vector_float
        """
        return _somac_swig.sensor_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sensor_sptr self, int which) -> float
        pc_output_buffers_full(sensor_sptr self) -> pmt_vector_float
        """
        return _somac_swig.sensor_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sensor_sptr self, int which) -> float
        pc_output_buffers_full_avg(sensor_sptr self) -> pmt_vector_float
        """
        return _somac_swig.sensor_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sensor_sptr self, int which) -> float
        pc_output_buffers_full_var(sensor_sptr self) -> pmt_vector_float
        """
        return _somac_swig.sensor_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(sensor_sptr self) -> float"""
        return _somac_swig.sensor_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(sensor_sptr self) -> float"""
        return _somac_swig.sensor_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(sensor_sptr self) -> float"""
        return _somac_swig.sensor_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(sensor_sptr self) -> float"""
        return _somac_swig.sensor_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(sensor_sptr self) -> float"""
        return _somac_swig.sensor_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(sensor_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _somac_swig.sensor_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(sensor_sptr self)"""
        return _somac_swig.sensor_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(sensor_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _somac_swig.sensor_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(sensor_sptr self) -> int"""
        return _somac_swig.sensor_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(sensor_sptr self) -> int"""
        return _somac_swig.sensor_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(sensor_sptr self, int priority) -> int"""
        return _somac_swig.sensor_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(sensor_sptr self) -> std::string"""
        return _somac_swig.sensor_sptr_name(self)


    def symbol_name(self):
        """symbol_name(sensor_sptr self) -> std::string"""
        return _somac_swig.sensor_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(sensor_sptr self) -> io_signature_sptr"""
        return _somac_swig.sensor_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(sensor_sptr self) -> io_signature_sptr"""
        return _somac_swig.sensor_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(sensor_sptr self) -> long"""
        return _somac_swig.sensor_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(sensor_sptr self) -> basic_block_sptr"""
        return _somac_swig.sensor_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(sensor_sptr self, int ninputs, int noutputs) -> bool"""
        return _somac_swig.sensor_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(sensor_sptr self) -> std::string"""
        return _somac_swig.sensor_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(sensor_sptr self, std::string name)"""
        return _somac_swig.sensor_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(sensor_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _somac_swig.sensor_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(sensor_sptr self) -> swig_int_ptr"""
        return _somac_swig.sensor_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(sensor_sptr self) -> swig_int_ptr"""
        return _somac_swig.sensor_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(sensor_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _somac_swig.sensor_sptr_message_subscribers(self, which_port)

sensor_sptr_swigregister = _somac_swig.sensor_sptr_swigregister
sensor_sptr_swigregister(sensor_sptr)


sensor_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sensor = sensor.make;

class broadcaster(object):
    """Proxy of C++ gr::somac::broadcaster class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(mac_addr):
        """make(std::vector< uint8_t,std::allocator< uint8_t > > mac_addr) -> broadcaster_sptr"""
        return _somac_swig.broadcaster_make(mac_addr)

    make = staticmethod(make)
    __swig_destroy__ = _somac_swig.delete_broadcaster
    __del__ = lambda self: None
broadcaster_swigregister = _somac_swig.broadcaster_swigregister
broadcaster_swigregister(broadcaster)

def broadcaster_make(mac_addr):
    """broadcaster_make(std::vector< uint8_t,std::allocator< uint8_t > > mac_addr) -> broadcaster_sptr"""
    return _somac_swig.broadcaster_make(mac_addr)

class broadcaster_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::somac::broadcaster)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::somac::broadcaster)> self) -> broadcaster_sptr
        __init__(boost::shared_ptr<(gr::somac::broadcaster)> self, broadcaster p) -> broadcaster_sptr
        """
        this = _somac_swig.new_broadcaster_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(broadcaster_sptr self) -> broadcaster"""
        return _somac_swig.broadcaster_sptr___deref__(self)

    __swig_destroy__ = _somac_swig.delete_broadcaster_sptr
    __del__ = lambda self: None

    def make(self, mac_addr):
        """make(broadcaster_sptr self, std::vector< uint8_t,std::allocator< uint8_t > > mac_addr) -> broadcaster_sptr"""
        return _somac_swig.broadcaster_sptr_make(self, mac_addr)


    def history(self):
        """history(broadcaster_sptr self) -> unsigned int"""
        return _somac_swig.broadcaster_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(broadcaster_sptr self, int which, int delay)
        declare_sample_delay(broadcaster_sptr self, unsigned int delay)
        """
        return _somac_swig.broadcaster_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(broadcaster_sptr self, int which) -> unsigned int"""
        return _somac_swig.broadcaster_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(broadcaster_sptr self) -> int"""
        return _somac_swig.broadcaster_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(broadcaster_sptr self) -> double"""
        return _somac_swig.broadcaster_sptr_relative_rate(self)


    def start(self):
        """start(broadcaster_sptr self) -> bool"""
        return _somac_swig.broadcaster_sptr_start(self)


    def stop(self):
        """stop(broadcaster_sptr self) -> bool"""
        return _somac_swig.broadcaster_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(broadcaster_sptr self, unsigned int which_input) -> uint64_t"""
        return _somac_swig.broadcaster_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(broadcaster_sptr self, unsigned int which_output) -> uint64_t"""
        return _somac_swig.broadcaster_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(broadcaster_sptr self) -> int"""
        return _somac_swig.broadcaster_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(broadcaster_sptr self, int m)"""
        return _somac_swig.broadcaster_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(broadcaster_sptr self)"""
        return _somac_swig.broadcaster_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(broadcaster_sptr self) -> bool"""
        return _somac_swig.broadcaster_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(broadcaster_sptr self, int m)"""
        return _somac_swig.broadcaster_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(broadcaster_sptr self) -> int"""
        return _somac_swig.broadcaster_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(broadcaster_sptr self, int i) -> long"""
        return _somac_swig.broadcaster_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(broadcaster_sptr self, long max_output_buffer)
        set_max_output_buffer(broadcaster_sptr self, int port, long max_output_buffer)
        """
        return _somac_swig.broadcaster_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(broadcaster_sptr self, int i) -> long"""
        return _somac_swig.broadcaster_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(broadcaster_sptr self, long min_output_buffer)
        set_min_output_buffer(broadcaster_sptr self, int port, long min_output_buffer)
        """
        return _somac_swig.broadcaster_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(broadcaster_sptr self) -> float"""
        return _somac_swig.broadcaster_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(broadcaster_sptr self) -> float"""
        return _somac_swig.broadcaster_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(broadcaster_sptr self) -> float"""
        return _somac_swig.broadcaster_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(broadcaster_sptr self) -> float"""
        return _somac_swig.broadcaster_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(broadcaster_sptr self) -> float"""
        return _somac_swig.broadcaster_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(broadcaster_sptr self) -> float"""
        return _somac_swig.broadcaster_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(broadcaster_sptr self, int which) -> float
        pc_input_buffers_full(broadcaster_sptr self) -> pmt_vector_float
        """
        return _somac_swig.broadcaster_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(broadcaster_sptr self, int which) -> float
        pc_input_buffers_full_avg(broadcaster_sptr self) -> pmt_vector_float
        """
        return _somac_swig.broadcaster_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(broadcaster_sptr self, int which) -> float
        pc_input_buffers_full_var(broadcaster_sptr self) -> pmt_vector_float
        """
        return _somac_swig.broadcaster_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(broadcaster_sptr self, int which) -> float
        pc_output_buffers_full(broadcaster_sptr self) -> pmt_vector_float
        """
        return _somac_swig.broadcaster_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(broadcaster_sptr self, int which) -> float
        pc_output_buffers_full_avg(broadcaster_sptr self) -> pmt_vector_float
        """
        return _somac_swig.broadcaster_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(broadcaster_sptr self, int which) -> float
        pc_output_buffers_full_var(broadcaster_sptr self) -> pmt_vector_float
        """
        return _somac_swig.broadcaster_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(broadcaster_sptr self) -> float"""
        return _somac_swig.broadcaster_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(broadcaster_sptr self) -> float"""
        return _somac_swig.broadcaster_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(broadcaster_sptr self) -> float"""
        return _somac_swig.broadcaster_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(broadcaster_sptr self) -> float"""
        return _somac_swig.broadcaster_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(broadcaster_sptr self) -> float"""
        return _somac_swig.broadcaster_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(broadcaster_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _somac_swig.broadcaster_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(broadcaster_sptr self)"""
        return _somac_swig.broadcaster_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(broadcaster_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _somac_swig.broadcaster_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(broadcaster_sptr self) -> int"""
        return _somac_swig.broadcaster_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(broadcaster_sptr self) -> int"""
        return _somac_swig.broadcaster_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(broadcaster_sptr self, int priority) -> int"""
        return _somac_swig.broadcaster_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(broadcaster_sptr self) -> std::string"""
        return _somac_swig.broadcaster_sptr_name(self)


    def symbol_name(self):
        """symbol_name(broadcaster_sptr self) -> std::string"""
        return _somac_swig.broadcaster_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(broadcaster_sptr self) -> io_signature_sptr"""
        return _somac_swig.broadcaster_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(broadcaster_sptr self) -> io_signature_sptr"""
        return _somac_swig.broadcaster_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(broadcaster_sptr self) -> long"""
        return _somac_swig.broadcaster_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(broadcaster_sptr self) -> basic_block_sptr"""
        return _somac_swig.broadcaster_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(broadcaster_sptr self, int ninputs, int noutputs) -> bool"""
        return _somac_swig.broadcaster_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(broadcaster_sptr self) -> std::string"""
        return _somac_swig.broadcaster_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(broadcaster_sptr self, std::string name)"""
        return _somac_swig.broadcaster_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(broadcaster_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _somac_swig.broadcaster_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(broadcaster_sptr self) -> swig_int_ptr"""
        return _somac_swig.broadcaster_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(broadcaster_sptr self) -> swig_int_ptr"""
        return _somac_swig.broadcaster_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(broadcaster_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _somac_swig.broadcaster_sptr_message_subscribers(self, which_port)

broadcaster_sptr_swigregister = _somac_swig.broadcaster_sptr_swigregister
broadcaster_sptr_swigregister(broadcaster_sptr)


broadcaster_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
broadcaster = broadcaster.make;

class metrics_gen(object):
    """Proxy of C++ gr::somac::metrics_gen class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(debug):
        """make(bool debug) -> metrics_gen_sptr"""
        return _somac_swig.metrics_gen_make(debug)

    make = staticmethod(make)
    __swig_destroy__ = _somac_swig.delete_metrics_gen
    __del__ = lambda self: None
metrics_gen_swigregister = _somac_swig.metrics_gen_swigregister
metrics_gen_swigregister(metrics_gen)

def metrics_gen_make(debug):
    """metrics_gen_make(bool debug) -> metrics_gen_sptr"""
    return _somac_swig.metrics_gen_make(debug)

class metrics_gen_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::somac::metrics_gen)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::somac::metrics_gen)> self) -> metrics_gen_sptr
        __init__(boost::shared_ptr<(gr::somac::metrics_gen)> self, metrics_gen p) -> metrics_gen_sptr
        """
        this = _somac_swig.new_metrics_gen_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(metrics_gen_sptr self) -> metrics_gen"""
        return _somac_swig.metrics_gen_sptr___deref__(self)

    __swig_destroy__ = _somac_swig.delete_metrics_gen_sptr
    __del__ = lambda self: None

    def make(self, debug):
        """make(metrics_gen_sptr self, bool debug) -> metrics_gen_sptr"""
        return _somac_swig.metrics_gen_sptr_make(self, debug)


    def history(self):
        """history(metrics_gen_sptr self) -> unsigned int"""
        return _somac_swig.metrics_gen_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(metrics_gen_sptr self, int which, int delay)
        declare_sample_delay(metrics_gen_sptr self, unsigned int delay)
        """
        return _somac_swig.metrics_gen_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(metrics_gen_sptr self, int which) -> unsigned int"""
        return _somac_swig.metrics_gen_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(metrics_gen_sptr self) -> int"""
        return _somac_swig.metrics_gen_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(metrics_gen_sptr self) -> double"""
        return _somac_swig.metrics_gen_sptr_relative_rate(self)


    def start(self):
        """start(metrics_gen_sptr self) -> bool"""
        return _somac_swig.metrics_gen_sptr_start(self)


    def stop(self):
        """stop(metrics_gen_sptr self) -> bool"""
        return _somac_swig.metrics_gen_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(metrics_gen_sptr self, unsigned int which_input) -> uint64_t"""
        return _somac_swig.metrics_gen_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(metrics_gen_sptr self, unsigned int which_output) -> uint64_t"""
        return _somac_swig.metrics_gen_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(metrics_gen_sptr self) -> int"""
        return _somac_swig.metrics_gen_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(metrics_gen_sptr self, int m)"""
        return _somac_swig.metrics_gen_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(metrics_gen_sptr self)"""
        return _somac_swig.metrics_gen_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(metrics_gen_sptr self) -> bool"""
        return _somac_swig.metrics_gen_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(metrics_gen_sptr self, int m)"""
        return _somac_swig.metrics_gen_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(metrics_gen_sptr self) -> int"""
        return _somac_swig.metrics_gen_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(metrics_gen_sptr self, int i) -> long"""
        return _somac_swig.metrics_gen_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(metrics_gen_sptr self, long max_output_buffer)
        set_max_output_buffer(metrics_gen_sptr self, int port, long max_output_buffer)
        """
        return _somac_swig.metrics_gen_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(metrics_gen_sptr self, int i) -> long"""
        return _somac_swig.metrics_gen_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(metrics_gen_sptr self, long min_output_buffer)
        set_min_output_buffer(metrics_gen_sptr self, int port, long min_output_buffer)
        """
        return _somac_swig.metrics_gen_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(metrics_gen_sptr self) -> float"""
        return _somac_swig.metrics_gen_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(metrics_gen_sptr self) -> float"""
        return _somac_swig.metrics_gen_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(metrics_gen_sptr self) -> float"""
        return _somac_swig.metrics_gen_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(metrics_gen_sptr self) -> float"""
        return _somac_swig.metrics_gen_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(metrics_gen_sptr self) -> float"""
        return _somac_swig.metrics_gen_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(metrics_gen_sptr self) -> float"""
        return _somac_swig.metrics_gen_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(metrics_gen_sptr self, int which) -> float
        pc_input_buffers_full(metrics_gen_sptr self) -> pmt_vector_float
        """
        return _somac_swig.metrics_gen_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(metrics_gen_sptr self, int which) -> float
        pc_input_buffers_full_avg(metrics_gen_sptr self) -> pmt_vector_float
        """
        return _somac_swig.metrics_gen_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(metrics_gen_sptr self, int which) -> float
        pc_input_buffers_full_var(metrics_gen_sptr self) -> pmt_vector_float
        """
        return _somac_swig.metrics_gen_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(metrics_gen_sptr self, int which) -> float
        pc_output_buffers_full(metrics_gen_sptr self) -> pmt_vector_float
        """
        return _somac_swig.metrics_gen_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(metrics_gen_sptr self, int which) -> float
        pc_output_buffers_full_avg(metrics_gen_sptr self) -> pmt_vector_float
        """
        return _somac_swig.metrics_gen_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(metrics_gen_sptr self, int which) -> float
        pc_output_buffers_full_var(metrics_gen_sptr self) -> pmt_vector_float
        """
        return _somac_swig.metrics_gen_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(metrics_gen_sptr self) -> float"""
        return _somac_swig.metrics_gen_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(metrics_gen_sptr self) -> float"""
        return _somac_swig.metrics_gen_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(metrics_gen_sptr self) -> float"""
        return _somac_swig.metrics_gen_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(metrics_gen_sptr self) -> float"""
        return _somac_swig.metrics_gen_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(metrics_gen_sptr self) -> float"""
        return _somac_swig.metrics_gen_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(metrics_gen_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _somac_swig.metrics_gen_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(metrics_gen_sptr self)"""
        return _somac_swig.metrics_gen_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(metrics_gen_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _somac_swig.metrics_gen_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(metrics_gen_sptr self) -> int"""
        return _somac_swig.metrics_gen_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(metrics_gen_sptr self) -> int"""
        return _somac_swig.metrics_gen_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(metrics_gen_sptr self, int priority) -> int"""
        return _somac_swig.metrics_gen_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(metrics_gen_sptr self) -> std::string"""
        return _somac_swig.metrics_gen_sptr_name(self)


    def symbol_name(self):
        """symbol_name(metrics_gen_sptr self) -> std::string"""
        return _somac_swig.metrics_gen_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(metrics_gen_sptr self) -> io_signature_sptr"""
        return _somac_swig.metrics_gen_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(metrics_gen_sptr self) -> io_signature_sptr"""
        return _somac_swig.metrics_gen_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(metrics_gen_sptr self) -> long"""
        return _somac_swig.metrics_gen_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(metrics_gen_sptr self) -> basic_block_sptr"""
        return _somac_swig.metrics_gen_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(metrics_gen_sptr self, int ninputs, int noutputs) -> bool"""
        return _somac_swig.metrics_gen_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(metrics_gen_sptr self) -> std::string"""
        return _somac_swig.metrics_gen_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(metrics_gen_sptr self, std::string name)"""
        return _somac_swig.metrics_gen_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(metrics_gen_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _somac_swig.metrics_gen_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(metrics_gen_sptr self) -> swig_int_ptr"""
        return _somac_swig.metrics_gen_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(metrics_gen_sptr self) -> swig_int_ptr"""
        return _somac_swig.metrics_gen_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(metrics_gen_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _somac_swig.metrics_gen_sptr_message_subscribers(self, which_port)

metrics_gen_sptr_swigregister = _somac_swig.metrics_gen_sptr_swigregister
metrics_gen_sptr_swigregister(metrics_gen_sptr)


metrics_gen_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
metrics_gen = metrics_gen.make;

class snr(object):
    """Proxy of C++ gr::somac::snr class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(window_size, threshold, periodicity):
        """make(uint32_t window_size, float threshold, uint16_t periodicity) -> snr_sptr"""
        return _somac_swig.snr_make(window_size, threshold, periodicity)

    make = staticmethod(make)
    __swig_destroy__ = _somac_swig.delete_snr
    __del__ = lambda self: None
snr_swigregister = _somac_swig.snr_swigregister
snr_swigregister(snr)

def snr_make(window_size, threshold, periodicity):
    """snr_make(uint32_t window_size, float threshold, uint16_t periodicity) -> snr_sptr"""
    return _somac_swig.snr_make(window_size, threshold, periodicity)

class snr_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::somac::snr)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::somac::snr)> self) -> snr_sptr
        __init__(boost::shared_ptr<(gr::somac::snr)> self, snr p) -> snr_sptr
        """
        this = _somac_swig.new_snr_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(snr_sptr self) -> snr"""
        return _somac_swig.snr_sptr___deref__(self)

    __swig_destroy__ = _somac_swig.delete_snr_sptr
    __del__ = lambda self: None

    def make(self, window_size, threshold, periodicity):
        """make(snr_sptr self, uint32_t window_size, float threshold, uint16_t periodicity) -> snr_sptr"""
        return _somac_swig.snr_sptr_make(self, window_size, threshold, periodicity)


    def history(self):
        """history(snr_sptr self) -> unsigned int"""
        return _somac_swig.snr_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(snr_sptr self, int which, int delay)
        declare_sample_delay(snr_sptr self, unsigned int delay)
        """
        return _somac_swig.snr_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(snr_sptr self, int which) -> unsigned int"""
        return _somac_swig.snr_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(snr_sptr self) -> int"""
        return _somac_swig.snr_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(snr_sptr self) -> double"""
        return _somac_swig.snr_sptr_relative_rate(self)


    def start(self):
        """start(snr_sptr self) -> bool"""
        return _somac_swig.snr_sptr_start(self)


    def stop(self):
        """stop(snr_sptr self) -> bool"""
        return _somac_swig.snr_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(snr_sptr self, unsigned int which_input) -> uint64_t"""
        return _somac_swig.snr_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(snr_sptr self, unsigned int which_output) -> uint64_t"""
        return _somac_swig.snr_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(snr_sptr self) -> int"""
        return _somac_swig.snr_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(snr_sptr self, int m)"""
        return _somac_swig.snr_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(snr_sptr self)"""
        return _somac_swig.snr_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(snr_sptr self) -> bool"""
        return _somac_swig.snr_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(snr_sptr self, int m)"""
        return _somac_swig.snr_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(snr_sptr self) -> int"""
        return _somac_swig.snr_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(snr_sptr self, int i) -> long"""
        return _somac_swig.snr_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(snr_sptr self, long max_output_buffer)
        set_max_output_buffer(snr_sptr self, int port, long max_output_buffer)
        """
        return _somac_swig.snr_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(snr_sptr self, int i) -> long"""
        return _somac_swig.snr_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(snr_sptr self, long min_output_buffer)
        set_min_output_buffer(snr_sptr self, int port, long min_output_buffer)
        """
        return _somac_swig.snr_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(snr_sptr self) -> float"""
        return _somac_swig.snr_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(snr_sptr self) -> float"""
        return _somac_swig.snr_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(snr_sptr self) -> float"""
        return _somac_swig.snr_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(snr_sptr self) -> float"""
        return _somac_swig.snr_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(snr_sptr self) -> float"""
        return _somac_swig.snr_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(snr_sptr self) -> float"""
        return _somac_swig.snr_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(snr_sptr self, int which) -> float
        pc_input_buffers_full(snr_sptr self) -> pmt_vector_float
        """
        return _somac_swig.snr_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(snr_sptr self, int which) -> float
        pc_input_buffers_full_avg(snr_sptr self) -> pmt_vector_float
        """
        return _somac_swig.snr_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(snr_sptr self, int which) -> float
        pc_input_buffers_full_var(snr_sptr self) -> pmt_vector_float
        """
        return _somac_swig.snr_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(snr_sptr self, int which) -> float
        pc_output_buffers_full(snr_sptr self) -> pmt_vector_float
        """
        return _somac_swig.snr_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(snr_sptr self, int which) -> float
        pc_output_buffers_full_avg(snr_sptr self) -> pmt_vector_float
        """
        return _somac_swig.snr_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(snr_sptr self, int which) -> float
        pc_output_buffers_full_var(snr_sptr self) -> pmt_vector_float
        """
        return _somac_swig.snr_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(snr_sptr self) -> float"""
        return _somac_swig.snr_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(snr_sptr self) -> float"""
        return _somac_swig.snr_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(snr_sptr self) -> float"""
        return _somac_swig.snr_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(snr_sptr self) -> float"""
        return _somac_swig.snr_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(snr_sptr self) -> float"""
        return _somac_swig.snr_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(snr_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _somac_swig.snr_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(snr_sptr self)"""
        return _somac_swig.snr_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(snr_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _somac_swig.snr_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(snr_sptr self) -> int"""
        return _somac_swig.snr_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(snr_sptr self) -> int"""
        return _somac_swig.snr_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(snr_sptr self, int priority) -> int"""
        return _somac_swig.snr_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(snr_sptr self) -> std::string"""
        return _somac_swig.snr_sptr_name(self)


    def symbol_name(self):
        """symbol_name(snr_sptr self) -> std::string"""
        return _somac_swig.snr_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(snr_sptr self) -> io_signature_sptr"""
        return _somac_swig.snr_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(snr_sptr self) -> io_signature_sptr"""
        return _somac_swig.snr_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(snr_sptr self) -> long"""
        return _somac_swig.snr_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(snr_sptr self) -> basic_block_sptr"""
        return _somac_swig.snr_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(snr_sptr self, int ninputs, int noutputs) -> bool"""
        return _somac_swig.snr_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(snr_sptr self) -> std::string"""
        return _somac_swig.snr_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(snr_sptr self, std::string name)"""
        return _somac_swig.snr_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(snr_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _somac_swig.snr_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(snr_sptr self) -> swig_int_ptr"""
        return _somac_swig.snr_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(snr_sptr self) -> swig_int_ptr"""
        return _somac_swig.snr_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(snr_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _somac_swig.snr_sptr_message_subscribers(self, which_port)

snr_sptr_swigregister = _somac_swig.snr_sptr_swigregister
snr_sptr_swigregister(snr_sptr)


snr_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
snr = snr.make;



